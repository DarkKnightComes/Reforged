buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}
apply plugin: 'net.minecraftforge.gradle'
//Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'idea'

// External properties
ext.configFile = file "build.properties"
configFile.withReader {
    // Load config.  It shall from now be referenced as simply config or project.config
    def prop = new Properties()
    prop.load(it)
    project.ext.config = new ConfigSlurper().parse prop
}

version = config.modVersion
group = "org.silvercatcher.reforged"
archivesBaseName = "reforged"

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

minecraft {
    // the mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   snapshot are built nightly.
    // stable_#            stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: config.mcpMappings, version: config.mcpVersion
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

    //accessTransformer = file('my_at.cfg')

    // default run configurations.
    // these can be tweaked, removed, or duplicated as needed.
    runs {
        client = {
            main "net.minecraftforge.userdev.UserdevLauncher"
            ideaModule "${project.name}_main"
            workingDirectory project.file('run').canonicalPath
            source sourceSets.main
            environment "target", "fmluserdevclient"
            environment "assetDirectory", downloadAssets.output.absolutePath
            environment "FORGE_VERSION", config.forgeVersion
            environment "FORGE_GROUP", "net.minecraftforge.test"
            environment "MCP_VERSION", config.mcpMappings + "-" + config.mcpVersion
            environment "MCP_MAPPINGS", config.mcpMappings + "_" + config.mcpVersion
            environment "MC_VERSION", config.minecraftVersion
            environment "MOD_CLASSES", "${sourceSets.main.output.resourcesDir}${File.pathSeparator}${sourceSets.main.output.classesDirs.join(File.pathSeparator)}"
        }
        server = {
            main "net.minecraftforge.userdev.UserdevLauncher"
            ideaModule "${project.name}_main"
            workingDirectory project.file('run').canonicalPath
            environment "target", "fmluserdevserver"
            environment "assetDirectory", downloadAssets.output.absolutePath
            environment "FORGE_VERSION", config.forgeVersion
            environment "FORGE_GROUP", "net.minecraftforge.test"
            environment "MCP_VERSION", config.mcpMappings + "-" + config.mcpVersion
            environment "MCP_MAPPINGS", config.mcpMappings + "_" + config.mcpVersion
            environment "MC_VERSION", config.minecraftVersion
            environment "MOD_CLASSES", "${sourceSets.main.output.resourcesDir}${File.pathSeparator}${sourceSets.main.output.classesDirs.join(File.pathSeparator)}"
        }
    }
}

dependencies {
    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft "net.minecraftforge.test:forge:" + config.minecraftVersion + '-' + config.forgeVersion

    // you may put jars on which you depend on in ./libs
    // or you may define them like so..
    //compile "some.group:artifact:version:classifier"
    //compile "some.group:artifact:version"

    // real examples
    //compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
    //compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

    // the 'provided' configuration is for optional dependencies that exist at compile-time but might not at runtime.
    //provided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // These dependencies get remapped to your current MCP mappings
    //deobf 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // for more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html

}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property 'version', project.version
    inputs.property 'mcversion', config.minecraftVersion

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
        expand 'version': project.version, 'mcversion': config.minecraftVersion
        //TODO Gets still not replaced..?
        include 'META_INF/mods.toml'
        expand 'version': project.version, 'mcversion': config.minecraftVersion
    }

    // copy everything else except the mods.toml
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
        exclude 'META_INF/mods.toml'
    }
}
